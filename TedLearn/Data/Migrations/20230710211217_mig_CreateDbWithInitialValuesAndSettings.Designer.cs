// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(TedLearnContext))]
    [Migration("20230710211217_mig_CreateDbWithInitialValuesAndSettings")]
    partial class mig_CreateDbWithInitialValuesAndSettings
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Data.Entities.Persons.Discounts.UDiscount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"), 1L, 1);

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<byte>("Percent")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("UsableCount")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("DiscountId");

                    b.HasIndex("DiscountCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Discounts_DiscountCode");

                    b.ToTable("Discounts", "Persons");

                    b.HasCheckConstraint("CK_Discounts_Percent", "[Percent] > 0 And [Percent] <= 100");

                    b.HasCheckConstraint("CK_UsableCount", "UsableCount > 0");
                });

            modelBuilder.Entity("Data.Entities.Persons.Discounts.UserDiscount", b =>
                {
                    b.Property<int>("UserDiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDiscountId"), 1L, 1);

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<byte>("Percent")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("UseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDiscountId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDiscounts", "Persons");

                    b.HasCheckConstraint("CK_UserDiscounts_Percent", "[Percent] > 0 And [Percent] <= 100");
                });

            modelBuilder.Entity("Data.Entities.Persons.Permission.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"), 1L, 1);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PermissionTitle")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("PermissionId");

                    b.HasIndex("ParentId");

                    b.ToTable("Permissions", "Persons");
                });

            modelBuilder.Entity("Data.Entities.Persons.Permission.RolePermission", b =>
                {
                    b.Property<int>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolePermissionId"), 1L, 1);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RolePermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions", "Persons");
                });

            modelBuilder.Entity("Data.Entities.Persons.Roles.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<bool>("CanDeleteOrEdit")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasComment("This Column Is For Concurrency Check");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_RoleName");

                    b.ToTable("Roles", "Persons");

                    b.HasData(
                        new
                        {
                            RoleId = 11001,
                            CanDeleteOrEdit = true,
                            CreateDate = new DateTime(2023, 7, 11, 0, 42, 17, 585, DateTimeKind.Local).AddTicks(6899),
                            IsDelete = false,
                            RoleName = "کاربر عادی"
                        },
                        new
                        {
                            RoleId = 11002,
                            CanDeleteOrEdit = true,
                            CreateDate = new DateTime(2023, 7, 11, 0, 42, 17, 585, DateTimeKind.Local).AddTicks(6915),
                            IsDelete = false,
                            RoleName = "ادمین"
                        },
                        new
                        {
                            RoleId = 11003,
                            CanDeleteOrEdit = true,
                            CreateDate = new DateTime(2023, 7, 11, 0, 42, 17, 585, DateTimeKind.Local).AddTicks(6917),
                            IsDelete = false,
                            RoleName = "استاد"
                        },
                        new
                        {
                            RoleId = 11004,
                            CanDeleteOrEdit = true,
                            CreateDate = new DateTime(2023, 7, 11, 0, 42, 17, 585, DateTimeKind.Local).AddTicks(6918),
                            IsDelete = false,
                            RoleName = "مدیر سایت"
                        });
                });

            modelBuilder.Entity("Data.Entities.Persons.Roles.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Persons");
                });

            modelBuilder.Entity("Data.Entities.Persons.Transactions.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions", "Persons");

                    b.HasCheckConstraint("CK_Amount", "[Amount] >= 1000 And [Amount] <= 2500000");
                });

            modelBuilder.Entity("Data.Entities.Persons.Transactions.TransactionType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"), 1L, 1);

                    b.Property<string>("TypeTitle")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("TypeId");

                    b.ToTable("TransactionTypes", "Persons");

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            TypeTitle = "واریز"
                        },
                        new
                        {
                            TypeId = 2,
                            TypeTitle = "برداشت"
                        });
                });

            modelBuilder.Entity("Data.Entities.Persons.Users.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:Identity", "11001,1");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("ActiveCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Biography")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreateActiveCode")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAvatar")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasComment("This Column Is For Concurrency Check");

                    b.Property<string>("WebsiteAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_PhoneNumber");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_UserName");

                    b.ToTable("Users", "Persons");
                });

            modelBuilder.Entity("Data.Entities.Products.Comment.CourseComment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseComments", "Products");
                });

            modelBuilder.Entity("Data.Entities.Products.Courses.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"), 1L, 1);

                    b.Property<string>("CourseDemoFile")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CourseImage")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CourseLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("CoursePrice")
                        .HasColumnType("money");

                    b.Property<string>("CourseRequirement")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CourseTags")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CourseTitle")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SubGroupId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasComment("This Column Is For Concurrency Check");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseTitle")
                        .IsUnique()
                        .HasDatabaseName("IX_Courses_CourseTitle");

                    b.HasIndex("GroupId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubGroupId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses", "Products");

                    b.HasCheckConstraint("CK_CoursePrice", "CoursePrice >= 0");
                });

            modelBuilder.Entity("Data.Entities.Products.Courses.CourseEpisode", b =>
                {
                    b.Property<int>("EpisodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EpisodeId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EpisodeFile")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<TimeSpan>("EpisodeTime")
                        .HasColumnType("time");

                    b.Property<string>("EpisodeTitle")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("EpisodeId");

                    b.HasIndex("EpisodeTime")
                        .HasDatabaseName("IX_CourseEpisodes_EpisodeTime");

                    b.HasIndex("EpisodeTitle")
                        .HasDatabaseName("IX_CourseEpisodes_EpisodeTitle");

                    b.HasIndex("SeasonId");

                    b.ToTable("CourseEpisodes", "Products");
                });

            modelBuilder.Entity("Data.Entities.Products.Courses.CourseGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"), 1L, 1);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("SubGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasComment("This Column Is For Concurrency Check");

                    b.HasKey("GroupId");

                    b.HasIndex("SubGroupId");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("IX_CourseGroups_Title");

                    b.ToTable("CourseGroups", "Products");

                    b.HasData(
                        new
                        {
                            GroupId = 1,
                            IsDelete = false,
                            Title = "گروه های دوره ها"
                        });
                });

            modelBuilder.Entity("Data.Entities.Products.Courses.CourseSeason", b =>
                {
                    b.Property<int>("SeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeasonId"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("SeasonTitle")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("SeasonId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SeasonTitle")
                        .IsUnique()
                        .HasDatabaseName("IX_CourseSeasons_SeasonTitle");

                    b.ToTable("CourseSeasons", "Products");
                });

            modelBuilder.Entity("Data.Entities.Products.Courses.CourseStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<string>("StatusTitle")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("StatusId");

                    b.ToTable("CourseStatuses", "Products");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusTitle = "درحال برگزاری"
                        },
                        new
                        {
                            StatusId = 2,
                            StatusTitle = "پایان یافته"
                        });
                });

            modelBuilder.Entity("Data.Entities.Products.Courses.UserCourse", b =>
                {
                    b.Property<int>("UC_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UC_Id"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UC_Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCourses", "Products");
                });

            modelBuilder.Entity("Data.Entities.Products.Question.AnswerQuestion", b =>
                {
                    b.Property<int>("AQ_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AQ_Id"), 1L, 1);

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("HasRightAnswer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AQ_Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("AnswerQuestions", "Products");
                });

            modelBuilder.Entity("Data.Entities.Sales.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<decimal>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsFinaly")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", "Sales");
                });

            modelBuilder.Entity("Data.Entities.Sales.OrderDetail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailId"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("DetailId");

                    b.HasIndex("CourseId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails", "Sales");
                });

            modelBuilder.Entity("Data.Entities.Persons.Discounts.UserDiscount", b =>
                {
                    b.HasOne("Data.Entities.Persons.Discounts.UDiscount", "UDiscount")
                        .WithMany("UserDiscounts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.Persons.Users.User", "User")
                        .WithMany("UserDiscounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UDiscount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Persons.Permission.Permission", b =>
                {
                    b.HasOne("Data.Entities.Persons.Permission.Permission", null)
                        .WithMany("SubPermissions")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Data.Entities.Persons.Permission.RolePermission", b =>
                {
                    b.HasOne("Data.Entities.Persons.Permission.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.Persons.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Data.Entities.Persons.Roles.UserRole", b =>
                {
                    b.HasOne("Data.Entities.Persons.Roles.Role", "Role")
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.Persons.Users.User", "User")
                        .WithMany("UserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Persons.Transactions.Transaction", b =>
                {
                    b.HasOne("Data.Entities.Persons.Transactions.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.Persons.Users.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TransactionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Products.Comment.CourseComment", b =>
                {
                    b.HasOne("Data.Entities.Products.Courses.Course", "Course")
                        .WithMany("CourseComments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.Products.Comment.CourseComment", null)
                        .WithMany("ReplyComment")
                        .HasForeignKey("ParentId");

                    b.HasOne("Data.Entities.Persons.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Products.Courses.Course", b =>
                {
                    b.HasOne("Data.Entities.Products.Courses.CourseGroup", "CourseToGroup")
                        .WithMany("Group")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.Products.Courses.CourseStatus", "CourseStatus")
                        .WithMany("Courses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.Products.Courses.CourseGroup", "CourseToSubGroup")
                        .WithMany("SubGroup")
                        .HasForeignKey("SubGroupId");

                    b.HasOne("Data.Entities.Persons.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CourseStatus");

                    b.Navigation("CourseToGroup");

                    b.Navigation("CourseToSubGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Products.Courses.CourseEpisode", b =>
                {
                    b.HasOne("Data.Entities.Products.Courses.CourseSeason", "CourseSeason")
                        .WithMany("CourseEpisodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CourseSeason");
                });

            modelBuilder.Entity("Data.Entities.Products.Courses.CourseGroup", b =>
                {
                    b.HasOne("Data.Entities.Products.Courses.CourseGroup", null)
                        .WithMany("SubCourseGroups")
                        .HasForeignKey("SubGroupId");
                });

            modelBuilder.Entity("Data.Entities.Products.Courses.CourseSeason", b =>
                {
                    b.HasOne("Data.Entities.Products.Courses.Course", "Course")
                        .WithMany("CourseSeasons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Data.Entities.Products.Courses.UserCourse", b =>
                {
                    b.HasOne("Data.Entities.Products.Courses.Course", "Course")
                        .WithMany("UserCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.Persons.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Products.Question.AnswerQuestion", b =>
                {
                    b.HasOne("Data.Entities.Products.Question.AnswerQuestion", null)
                        .WithMany("Answers")
                        .HasForeignKey("AnswerId");

                    b.HasOne("Data.Entities.Products.Courses.Course", "Course")
                        .WithMany("AnswerQuestions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.Persons.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Sales.Order", b =>
                {
                    b.HasOne("Data.Entities.Persons.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Sales.OrderDetail", b =>
                {
                    b.HasOne("Data.Entities.Products.Courses.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.Sales.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Data.Entities.Persons.Discounts.UDiscount", b =>
                {
                    b.Navigation("UserDiscounts");
                });

            modelBuilder.Entity("Data.Entities.Persons.Permission.Permission", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("SubPermissions");
                });

            modelBuilder.Entity("Data.Entities.Persons.Roles.Role", b =>
                {
                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Data.Entities.Persons.Transactions.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Data.Entities.Persons.Users.User", b =>
                {
                    b.Navigation("Transactions");

                    b.Navigation("UserDiscounts");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Data.Entities.Products.Comment.CourseComment", b =>
                {
                    b.Navigation("ReplyComment");
                });

            modelBuilder.Entity("Data.Entities.Products.Courses.Course", b =>
                {
                    b.Navigation("AnswerQuestions");

                    b.Navigation("CourseComments");

                    b.Navigation("CourseSeasons");

                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("Data.Entities.Products.Courses.CourseGroup", b =>
                {
                    b.Navigation("Group");

                    b.Navigation("SubCourseGroups");

                    b.Navigation("SubGroup");
                });

            modelBuilder.Entity("Data.Entities.Products.Courses.CourseSeason", b =>
                {
                    b.Navigation("CourseEpisodes");
                });

            modelBuilder.Entity("Data.Entities.Products.Courses.CourseStatus", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Data.Entities.Products.Question.AnswerQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Data.Entities.Sales.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
